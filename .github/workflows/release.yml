name: Build, Package JAR, Push Docker Image to ECR, and GitHub Release

on:
  push:
    tags:
      - 'v*.*.*'
      
env:
  NAME: payments
  CONTAINER_REGISTRY: 767397794709.dkr.ecr.us-east-2.amazonaws.com/lanceplarsen
  WIZ_CLIENT_ID: ${{ secrets.WIZ_CLIENT_ID }}
  WIZ_CLIENT_SECRET: ${{ secrets.WIZ_CLIENT_SECRET }}
  WIZ_VULN_POLICY: "Default vulnerabilities policy"
  WIZ_SENSITIVE_DATA_POLICY: "Default sensitive data policy"
  WIZ_SECRETS_POLICY: "Default secrets policy"
  WIZ_IAC_POLICY: "Default IaC policy"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout code
      uses: actions/checkout@v3

    - name: Set up JDK 17
      uses: actions/setup-java@v3
      with:
        distribution: 'corretto'
        java-version: '17'

    - name: Determine Docker tags
      id: get_version
      run: |
        VERSION="${{ github.ref }}"  # Strip the 'refs/tags/' part
        VERSION="${VERSION#refs/tags/}"
        echo "VERSION=$VERSION" >> $GITHUB_ENV

    - name: Cache Gradle dependencies
      uses: actions/cache@v3
      with:
        path: ~/.gradle
        key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
        restore-keys: |
          ${{ runner.os }}-gradle-

    - name: Build with Gradle
      run: ./gradlew clean build
      env:
        VERSION: ${{ env.VERSION }} 

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and Tag Docker Image
      run: |
        docker build -t ${CONTAINER_REGISTRY}/${NAME}:${{ env.VERSION }} .
  
    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: us-east-2
  
    - name: Log in to Amazon ECR
      run: |
        aws ecr get-login-password --region us-east-2 | docker login --username AWS --password-stdin ${CONTAINER_REGISTRY}
  
    - name: Push Docker image to ECR
      run: |
        docker push ${CONTAINER_REGISTRY}/${NAME}:${{ env.VERSION }}     

    - name: Download Wiz CLI
      run: curl -o wizcli https://wizcli.app.wiz.io/latest/wizcli && chmod +x wizcli

    - name: Authenticate to Wiz
      run: sudo -E ./wizcli auth --id "$WIZ_CLIENT_ID" --secret "$WIZ_CLIENT_SECRET"

    - name: Wiz CLI image scan
      id: scan
      run: |-
        sudo -E ./wizcli docker scan -i ${CONTAINER_REGISTRY}/${NAME}:${{ env.VERSION }} --sensitive-data --secrets --policy "$WIZ_SECRETS_POLICY" --policy "$WIZ_VULN_POLICY" --policy "$WIZ_SENSITIVE_DATA_POLICY" --policy-hits-only \
        --driver mountWithLayers --dockerfile "./Dockerfile" --output wiz-output.json,sarif,true --tag github_action_run_id=${{ github.run_id }}

    - name: Run Wiz CLI image tag
      run: |
        sudo -E ./wizcli docker tag -i ${CONTAINER_REGISTRY}/${NAME}:${{ env.VERSION }}   

    - name: Upload JAR artifact
      uses: actions/upload-artifact@v3
      with:
        name: spring-boot-payments-jar
        path: build/libs/*.jar
        
  release:
    needs: build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
  
      - name: Download JAR artifact
        uses: actions/download-artifact@v3
        with:
          name: spring-boot-payments-jar
          path: build/libs/
  
      - name: Create GitHub Release
        id: create_release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          files: build/libs/*.jar
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
